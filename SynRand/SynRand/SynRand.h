/*
 *	File:		SynRand.h
 *
 *	Version:	1.0
 *
 *	Created:	1/31/17
 *
 *	Copyright:  Copyright 2017 Penguin. All rights reserved.
 *
 *  Details:    This project was generated by Apple's AU Effect template as updated by Alex Kenis 8/30/15
 *
 *	Disclaimer:	IMPORTANT:  This Apple software is supplied to you by Apple Computer, Inc. ("Apple") in
 *				consideration of your agreement to the following terms, and your use, installation, modification
 *				or redistribution of this Apple software constitutes acceptance of these terms.  If you do
 *				not agree with these terms, please do not use, install, modify or redistribute this Apple
 *				software.
 *
 *				In consideration of your agreement to abide by the following terms, and subject to these terms,
 *				Apple grants you a personal, non-exclusive license, under Apple's Copyrights in this
 *				original Apple software (the "Apple Software"), to use, reproduce, modify and redistribute the
 *				Apple Software, with or without modifications, in source and/or binary forms; provided that if you
 *				redistribute the Apple Software in its entirety and without modifications, you must retain this
 *				notice and the following text and disclaimers in all such redistributions of the Apple Software.
 *				Neither the name, trademarks, service marks or logos of Apple Computer, Inc. may be used to
 *				endorse or promote products derived from the Apple Software without specific prior written
 *				permission from Apple.  Except as expressly stated in this notice, no other rights or
 *				licenses, express or implied, are granted by Apple herein, including but not limited to any
 *				patent rights that may be infringed by your derivative works or by other works in which the
 *				Apple Software may be incorporated.
 *
 *				The Apple Software is provided by Apple on an "AS IS" basis.  APPLE MAKES NO WARRANTIES, EXPRESS OR
 *				IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY
 *				AND FITNESS FOR A PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION ALONE
 *				OR IN COMBINATION WITH YOUR PRODUCTS.
 *
 *				IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL OR CONSEQUENTIAL
 *				DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 *				OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) ARISING IN ANY WAY OUT OF THE USE,
 *				REPRODUCTION, MODIFICATION AND/OR DISTRIBUTION OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER
 *				UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN
 *				IF APPLE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *
 *
 */

#include "AUInstrumentBase.h"
#include "SynRandVersion.h"
#include "SynRandUtil.h"

#ifndef __SynRand_h__
#define __SynRand_h__


#pragma mark ____SynRand Parameters


static const UInt32 kNumNotes = 12;


// parameters
static const float kDefaultValue_GlobalVolume = 0.5;
static const float kDefaultValue_PartFreqMod = 1;
static const float kDefaultValue_PartVolMod = 1.0;
static const float kDefaultValue_PartEnabledBool = 0;
static const float kDefaultValue_PartLFOFreq = 1.0;
static const int kDefaultValue_PartWaveType = 0;


static CFStringRef kGlobalVolumeName = CFSTR("Global Volume");
static CFStringRef kWaveTypeName = CFSTR("Wave Type");
static CFStringRef kPartFreqModName = CFSTR("Frequency Modifier");
static CFStringRef kPartVolModName = CFSTR("Volume Modifier");
static CFStringRef kPartEnabledBoolName = CFSTR("Enabled State");
static CFStringRef kPartLFOFreqName = CFSTR("Low Frequency Oscillator");
static CFStringRef kPartWaveTypeName = CFSTR("Waveform Type");

struct TestNote : public SynthNote
{
    virtual					~TestNote() {}
    
    virtual bool			Attack(const MusicDeviceNoteParams &inParams)
    {
#if DEBUG_PRINT
        printf("TestNote::Attack %p %d\n", this, GetState());
#endif
        double sampleRate = SampleRate();
        amp = 0.;
        maxamp = 0.4 * pow(inParams.mVelocity/127., 3.);
        up_slope = maxamp / (0.1 * sampleRate);
        dn_slope = -maxamp / (0.3 * sampleRate);
        fast_dn_slope = -maxamp / (0.05 * sampleRate);
        
        for(int i = 0; i < NUM_PARTIALS; i++)
        {
            partPhase[i] = 0;
            lfoPhase[i] = 0;
        }
        return true;
    }
    virtual void			Kill(UInt32 inFrame); // voice is being stolen.
    virtual void			Release(UInt32 inFrame);
    virtual void			FastRelease(UInt32 inFrame);
    virtual Float32			Amplitude() { return amp; } // used for finding quietest note for voice stealing.
    virtual OSStatus		Render(UInt64 inAbsoluteSampleFrame, UInt32 inNumFrames, AudioBufferList** inBufferList, UInt32 inOutBusCount);
    
    double amp, maxamp;
    double up_slope, dn_slope, fast_dn_slope;
    double partPhase[NUM_PARTIALS];
    double lfoPhase [NUM_PARTIALS];
};


#pragma mark ____SynRand
class SynRand : public AUMonotimbralInstrumentBase
{
public:
    SynRand(AudioUnit component);
    
    virtual ~SynRand();
    
    virtual OSStatus            Initialize();
    virtual void                Cleanup();
    
    virtual AUElement*          CreateElement(AudioUnitScope scope,
                                              AudioUnitElement element);
    
    
    
    virtual	OSStatus			GetParameterValueStrings(AudioUnitScope			inScope,
                                                         AudioUnitParameterID		inParameterID,
                                                         CFArrayRef *			outStrings);
    
    virtual	OSStatus			GetParameterInfo(AudioUnitScope			inScope,
                                                 AudioUnitParameterID	inParameterID,
                                                 AudioUnitParameterInfo	&outParameterInfo);
    
     // START COCOA UI::
    virtual OSStatus			GetPropertyInfo(AudioUnitPropertyID		inID,
                                                AudioUnitScope			inScope,
                                                AudioUnitElement		inElement,
                                                UInt32 &			outDataSize,
                                                Boolean	&			outWritable );
    
    virtual OSStatus			GetProperty(AudioUnitPropertyID inID,
                                            AudioUnitScope 		inScope,
                                            AudioUnitElement 		inElement,
                                            void *			outData);
    // END COCOA UI
    
    virtual	bool				SupportsTail () { return true; }
    virtual Float64				GetTailTime() {return 0.001;}
    virtual Float64				GetLatency() {return 0.0;}
    
    /*! @method Version */
    virtual OSStatus            Version() { return kSynRandVersion; }
    
    
    MidiControls*               GetControls(MusicDeviceGroupID inChannel)
    {
        SynthGroupElement *group = GetElForGroupID(inChannel);
        return (MidiControls*) group->GetMIDIControlHandler();
    }
    
protected:
    
    TestNote mTestNotes[kNumNotes];
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


#endif